# Shebang. Executing bash via /usr/bin/env makes scripts more portable.
snippet #!
	#!/usr/bin/env sh

snippet s#!
	#!/usr/bin/env sh
	set -euo pipefail

snippet safe
	set -euo pipefail

snippet bash
	#!/usr/bin/env bash

snippet sbash
	#!/usr/bin/env bash
	set -euo pipefail
	IFS=$'\n\t'

snippet if
	if [[ ${1:condition} ]]; then
		${0:${VISUAL}}
	fi
snippet elif
	elif [[ ${1:condition} ]]; then
		${0:${VISUAL}}
snippet for
	for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do
		${0:${VISUAL}}
	done
snippet fori
	for ${1:needle} in ${2:haystack} ; do
		${0:${VISUAL}}
	done
snippet wh
	while [[ ${1:condition} ]]; do
		${0:${VISUAL}}
	done
snippet until
	until [[ ${1:condition} ]]; do
		${0:${VISUAL}}
	done
snippet case
	case ${1:word} in
		${2:pattern})
			${0};;
	esac
snippet go
	while getopts '${1:o}' ${2:opts}
	do
		case $$2 in
		${3:o0})
			${0:#staments};;
		esac
	done
# Set SCRIPT_DIR variable to directory script is located.
snippet sdir
	SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# getopt
snippet getopt
	# $*: command line arguments = "$@"
	parseCommandLine() {

	    # declare options globally and readonly
	    declare option
	    while getopts 'nvhxt:c:' option; do
	        case $option in
	            h)
	                printUsage
	                exit 0
	                ;;
	            c)
	                declare -gr CONFIG_FILE=$OPTARG
	                ;;
	            v)
	                declare -gr VERBOSE=1
	                ;;
	            x)
	                declare -gr DEBUG='-x'
	                set -x
	                ;;
	            t)
	                RUN_TESTS=$OPTARG
	                verbose VINFO "Running tests"
	                ;;
	            n)
	                declare -gr PRETEND=1
	                ;;
	            *)  printUsage >&2
	                # prints usage after the default error message (invalid option or missing option argument).
	                # default error messages are disabled if the first character of optstring is ":".
	                exit 1
	                ;;
	        esac
	    done
	    shift $((OPTIND-1))

	    if [[ -z $RUN_TESTS ]]; then
	        [[ ! -f $CONFIG_FILE ]] \
	            && exitWithError "You must provide --config file"
	    fi

	    if (( $# != 1 )); then
	        printUsage
	        exit 1
	    fi

	    return 0
	}

snippet getoptslong
	declare args arg
	# this syntax iterates over all function args
	for arg; do
	    declare delim=""
	    case "$arg" in
	        # translate --gnu-long-options to -g (short options)
	        --config)         args="${args}-c " ;;
	        --pretend)        args="${args}-n " ;;
	        --test)           args="${args}-t " ;;
	        --help-config)    usage_config && exit 0 ;;
	        --help)           args="${args}-h " ;;
	        --verbose)        args="${args}-v " ;;
	        --debug)          args="${args}-x " ;;
	        # pass through anything else
	        *) [[ "${arg:0:1}" == "-" ]] || delim="\""
	            args="${args}${delim}${arg}${delim} " ;;
	    esac
	done
	# Reset the positional parameters to the short options
	eval set -- $args

snippet root
	if [ \$(id -u) -ne 0 ]; then exec sudo \$0; fi

snippet fun-sh
	${1:function_name}() {
		${0:#function_body}
	}

snippet fun
	function ${1:function_name}() {
		${0:#function_body}
	}

snippet f
	${1:function_name}() {
		declare ${2}=\$1
		${0:# function body}
	}
